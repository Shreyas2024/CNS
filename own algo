#include <iostream>
#include <cctype>
#include <string>
using namespace std;


string polybiusEncrypt(const string &message) {
    string encryptedMessage = "";
    string polybiusTable[5] = {
        "ABCDE",
        "FGHIJ",
        "KLMNO",
        "PQRST",
        "UVWXY"
    };
    for (char c : message) {
        if (isalpha(c)) {
            c = toupper(c); // Convert to uppercase
            if (c == 'Z') {
                // Add "5x" to the encrypted message
encryptedMessage += "5x";
            } else {
                for (int row = 0; row < 5; ++row) {
size_t col = polybiusTable[row].find(c);
                    if (col != string::npos) {
encryptedMessage += to_string(row + 1) + to_string(col + 1);
                        break;
                    }
                }
            }
        } else {
encryptedMessage += c;
        }
    }
    return encryptedMessage;
}



string decryptMessage(const string &encryptedMessage) {
    string decryptedMessage = "";
    string polybiusTable[5] = {
        "ABCDE",
        "FGHIJ",
        "KLMNO",
        "PQRST",
        "UVWXY"
    };

    for (size_t i = 0; i<encryptedMessage.length(); i++) {
        char c = encryptedMessage[i];

        if (c == '5' &&i + 1 <encryptedMessage.length() &&encryptedMessage[i + 1] == 'x') {
            // Decoding "5x" as 'Z'
decryptedMessage += 'Z';
i++; // Skip the 'x'
        } else if (isdigit(c) &&i + 1 <encryptedMessage.length() && isdigit(encryptedMessage[i + 1])) {
            // Decode two digits representing the row and column
            int row = c - '0' - 1; // Subtract 1 to get the index
            int col = encryptedMessage[i + 1] - '0' - 1; // Subtract 1 to get the index
            if (row >= 0 && row < 5 && col >= 0 && col < 5) {
decryptedMessage += polybiusTable[row][col];
i++; // Skip the next digit
            } else {
                // Invalid digits, just append them as-is
decryptedMessage += c;
            }
        } else {
            // Character is not a digit or "5x", append it as-is
decryptedMessage += c;
        }
    }

    return decryptedMessage;
}

int main () {
    string message;
cout<< "Enter a message to encrypt: ";
getline (cin, message);

    string encryptedMessage = polybiusEncrypt (message);
cout<< "Encrypted message: " <<encryptedMessage<<std::endl;

    string decryptedMessage = decryptMessage (encryptedMessage);
cout<< "Decrypted message: " <<decryptedMessage<<std::endl;
}
